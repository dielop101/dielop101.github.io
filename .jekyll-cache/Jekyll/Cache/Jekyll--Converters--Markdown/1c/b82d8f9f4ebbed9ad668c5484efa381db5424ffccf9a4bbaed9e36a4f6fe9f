I"à!<p>A ra√≠z de mi anterior post, me gustar√≠a tratar el uso de Git en el IDE que m√°s utilizo como desarrollador .NET: <a href="https://visualstudio.microsoft.com/es/" target="_blank">Visual Studio</a>. Suelo recomendar el uso de un IDE para trabajar con Git, no sin antes haber entendido los conceptos que subyacen en las acciones que realiza el IDE (comentados en mi <a href="https://dielop101.github.io/CheatSheet-Git-Basic/" target="_blank">anterior post</a>).</p>

<p>Visual Studio proporciona una serie de herramientas para poder gestionar repositorios Git. No considero que sea una herramienta que proporcione todas las capacidades que ofrece Git (como podr√≠a ser <a href="https://gitextensions.github.io/" target="_blank">GitExtensions</a> o <a href="https://www.sourcetreeapp.com/" target="_blank">SourceTree</a>, pero para un uso cotidiano de Git es m√°s que suficiente.</p>

<div align="center">
  <img src="/images/git-vs.png" />
</div>

<h2 id="preparando-entorno">Preparando entorno</h2>
<p>Para los ejemplos, utilizar√© Visual Studio 2019 y como repositorio remoto, GitHub.</p>

<p>Como vimos, anteriormente exist√≠an 2 formas para iniciar un repositorio:</p>

<p><strong>Init</strong> - Tras crear un proyecto nuevo, tendremos la opci√≥n de a√±adirlo al control de versiones (Add to Source Control). Tras seleccionar que queremos usar Git, Visual Studio generar√° todo lo necesario para tener el repositorio creado con la rama master por defecto.</p>
<div align="center">
  <img src="/images/GitVisualStudio/init-01.PNG" />
  <i>comando init aplicado desde visual studio</i>
</div>
<p><br /></p>
<div align="center">
  <img src="/images/GitVisualStudio/init-02.PNG" />
  <i>estado final tras iniciar un repositorio</i>
</div>

<p><strong>Clone</strong> - En caso de querer clonar un repositorio existente, simplemente tendremos que seleccionar la opci√≥n de ‚ÄúManage Connections‚Äù y pulsar en la opci√≥n ‚ÄúClone‚Äù. En el primer input, introduciremos el repositorio remoto. En el segundo input, d√≥nde queremos crear en local el repositorio.</p>
<div align="center">
  <img src="/images/GitVisualStudio/clone-01.PNG" />
  <i>clonaci√≥n de un repositorio existente</i>
</div>

<h2 id="iniciando-desarrollo">Iniciando desarrollo</h2>
<p>De nuevo, siguiendo las acciones descritas en el post anterior:</p>

<p><strong>Status</strong> - El estado lo tenemos siempre presente desde Visual Studio, en la barra inferior de la aplicaci√≥n. De izquierda a derecha, los iconos inferiores indican: commits pendientes de realizar push, cambios pendientes que no se han llevado a un commit, repositorio actual y rama actual.</p>
<div align="center">
  <img src="/images/GitVisualStudio/status-01.PNG" />
  <div><i>barra inferior del Visual Studio</i></div>
</div>

<p><strong>Branch -a</strong> - El listado de ramas la podemos obtener desde la opci√≥n ‚ÄúBranches‚Äù, accesible desde la ‚ÄúHome‚Äù.</p>
<div align="center">
  <img src="/images/GitVisualStudio/branch-01.PNG" />
  <div><i>Team Explorer - Branches</i></div>
</div>

<p><strong>Branch [branch name]</strong> - Para crear una nueva rama, desde la vista anterior seleccionamos la opci√≥n ‚ÄúNew Branch‚Äù. En el primer input introduciremos el nombre de la nueva rama, mientras que en el segundo input seleccionaremos la rama de la cual se va a obtener la rama. El checkbox nos indicar√° si queremos movernos a la nueva rama tras su creaci√≥n.</p>
<div align="center">
  <img src="/images/GitVisualStudio/branch-02.PNG" />
  <div><i>Branches - formulario para crear una nueva rama</i></div>
</div>

<p><strong>Checkout</strong> - Desde la vista de ‚ÄúBranches‚Äù hacemos doble click a la rama que queremos cambiar. Se marcar√° en negro la rama en la cual est√©s actualmente.</p>
<div align="center">
  <img src="/images/GitVisualStudio/Checkout-01.PNG" />
  <div><i>Haciendo doble click cambia a la rama dev </i></div>
</div>

<h2 id="actualizar-rama">Actualizar rama</h2>

<p><strong>Stash</strong> - Accedemos desde la ‚ÄúHome‚Äù, en ‚ÄúChanges‚Äù para entrar a la gesti√≥n de los cambios en la rama. Una vez dentro, veremos la opci√≥n de ‚Äústash‚Äù. Prodecemos a apilar todo, lo que generar√° un elemento en la pila y no tener cambios pendientes.</p>
<div align="center">
  <img src="/images/GitVisualStudio/stash-01.PNG" />
  <div><i>Acceso a "Changes"</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/stash-02.PNG" />
  <div><i>Apilando cambios</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/stash-03.PNG" />
  <div><i>Cambios apilados. No quedan cambios pendientes</i></div>
</div>
<p><strong>Fetch</strong> - Para ver los cambios que ha sufrido nuestra rama en el repositorio remoto, desde el ‚ÄúTeam Explorer - Home‚Äù pulsamos en el bot√≥n ‚ÄúSync‚Äù y nos llevar√° a las opciones de sincronizaci√≥n. Pulsamos en ‚ÄúFetch‚Äù y nos traer√° los commits que no tengamos en nuestro local.</p>
<div align="center">
  <img src="/images/GitVisualStudio/fetch-01.PNG" />
  <div><i>Opci√≥n "Sync"</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/fetch-02.PNG" />
  <div><i>Acci√≥n "Fetch"</i></div>
</div>

<p><strong>Pull</strong> - Una vez realizado el fetch, pulsando sobre ‚ÄúPull‚Äù bajar√° los cambios en nuestra rama local.</p>
<div align="center">
  <img src="/images/GitVisualStudio/pull-01.PNG" />
  <div><i>Acci√≥n "Fetch"</i></div>
</div>

<p><strong>Stash pop</strong> - Teniendo el contenido anteriormente mencionado apilado, procedemos a desapilarlo con la opci√≥n ‚ÄúPop‚Äù, seleccionando con el bot√≥n derecho en el elemento a desapilar. Dependiendo nuestra necesidad, elegiremos dejarlo o no en el stage. En nuestro caso, no ser√° necesario.</p>
<div align="center">
  <img src="/images/GitVisualStudio/stash-04.PNG" />
  <div><i>Opciones para desapilar</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/stash-05.PNG" />
  <div><i>No queda nada en la pila. Se restauran los cambios pendientes</i></div>
</div>

<h2 id="subir-cambios">Subir cambios</h2>
<p><strong>Add</strong> - Seleccionamos los ficheros que queremos insertar en el stage. Con bot√≥n derecho sobre los mismos, nos aparecer√° la opci√≥n de ‚ÄúStage‚Äù. Lo que quede dentro del stage ser√°n los ficheros que se empaquetar√°n en el commit que se cree. El resto, quedar√°n fuera del commit.</p>
<div align="center">
  <img src="/images/GitVisualStudio/add-01.PNG" />
  <div><i>Opci√≥n "Stage"</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/add-02.PNG" />
  <div><i>Secci√≥n "Staged Changes"</i></div>
</div>

<p><strong>Commit</strong> - Hilando con el comando anterior, rellenando el input con el mensaje que queramos reflejar, tendremos el commit creado pulsando ‚ÄúCommit Staged‚Äù. Como indica el comentario, s√≥lo se har√° commit de los ficheros que est√©n bajo ‚ÄúStaged Changes‚Äù. En caso de no haber creado ‚ÄúStaged Changes‚Äù, se realizar√≠a commit de todos los cambios que se hubiesen realizado en la rama.</p>
<div align="center">
  <img src="/images/GitVisualStudio/commit-01.PNG" />
  <div><i>Acci√≥n "Commit Staged"</i></div>
</div>
<div align="center">
  <img src="/images/GitVisualStudio/commit-02.PNG" />
  <div><i>Listado de commits pendientes de realizar push</i></div>
</div>

<p><strong>Push</strong> - Por √∫ltimo, en la parte superior del listado de commits, tenemos la opci√≥n de realizar el ‚ÄúPush‚Äù. Esto realizar√° la sincronizaci√≥n de los cambios locales al repositorio remoto.</p>
<div align="center">
  <img src="/images/GitVisualStudio/push-01.PNG" />
  <div><i>Acci√≥n "Push"</i></div>
</div>

<h2 id="finalizando-desarrollo">Finalizando desarrollo</h2>
<p>Una vez finalizado el desarrollo, procedemos a mergear los cambios de dev en la rama master. Para ello, cambiaremos de rama a master. Recuerda que, una vez mergeado el contenido de dev en master, tendr√°s que realizar el push al repositorio, dado que el merge se ha realizado en local.</p>

<p><strong>Merge</strong> - Combina los cambios de una rama origen a una rama destino. En este caso, mergearemos dev en master.</p>
<pre><code class="language-git">$ git merge dev
    Merge made by the 'recursive' strategy.
     test2 | 2 +-
     1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<h2 id="conclusiones">Conclusiones</h2>
<p>Git tiene infinidad de comandos y de par√°metros. Con este post, trato de documentar los conceptos y los comandos que considero m√°s importantes, dado que son los que m√°s uso en mi d√≠a a d√≠a. Cualquier duda o sugerencia, estoy disponible en mis redes sociales :)</p>
:ET