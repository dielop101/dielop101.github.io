I"≈<p>De todos es conocido que Git es el sistema de control de versiones m√°s conocido y usado en el mundo. Aqu√≠ os dejo un peque√±o <i>cheatsheet</i> de los comandos que personalmente m√°s suelo usar. ¬°Espero que os sirvan!</p>

<div align="center">
  <img src="https://dielop101.github.io/images/gitCommands.png" />
</div>

<h2 id="preparando-entorno">Preparando entorno</h2>
<p>Podemos utilizar 2 comandos para iniciar nuestro entorno:</p>

<p>Init: crea un nuevo repositorio con la rama master por defecto.</p>
<pre><code class="language-git">$ git init
    Initialized empty Git repository in C:/myrepository/.git/
</code></pre>
<p>Clone: partiendo de un repositorio ya existente, clona y sincroniza un repositorio remoto en tu entorno local. Por defecto, te situar√° en la rama master. En el ejemplo, clonaremos el repositorio vac√≠o ‚Äúmydummyrepo‚Äù de github a nuestro local</p>
<pre><code class="language-git">$ git clone https://github.com/dielop101/mydummyrepo.git
    Cloning into 'mydummyrepo'...
    warning: You appear to have cloned an empty repository.
</code></pre>
<h2 id="iniciando-desarrollo">Iniciando desarrollo</h2>
<p>Una vez ya tenemos el repositorio creado, necesitaremos saber el estado actual, ramas existentes y c√≥mo poder crear una rama para empezar nuestro desarrollo.</p>

<p>Status: Devuelve el estado actual del repositorio. Sabremos identificar rama actual, si est√° actualizada frente al repositorio remoto y si tenemos algo pendiende de subir.</p>
<pre><code class="language-git">$ git status
    On branch master
    Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
      (use "git pull" to update your local branch)

    nothing to commit, working tree clean
</code></pre>
<p>Branch -a: Lista las ramas tanto locales como remotas, indicando la rama en la cual te encuentras actualmente mediante un asterisco.</p>
<pre><code class="language-git">$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>
<p>Branch [branch name] - Dado que estamos en rama master, crearemos una rama que dependa de master. Vamos a crear dev:</p>
<pre><code class="language-git">$ git branch dev
</code></pre>
<p>Checkout - Permite cambiar de rama, en el caso de que se permita. Si detecta ficheros modificados, no te permitir√° el cambio (tendr√°s que hacer commit o stash para no tener contenido pendiente de subir).</p>
<pre><code class="language-git">$ git checkout dev
    Switched to branch 'dev'
</code></pre>
<p>Checkout -b [branch name] - Crea rama y cambia a dicha rama (es decir, hace un branch + checkout)</p>
<pre><code class="language-git">$ git checkout -b dev
    Switched to a new branch 'dev'
</code></pre>
<h2 id="actualizar-rama">Actualizar rama</h2>
<p>Parece que alguien ha actualizado master, creando un fichero ‚Äútest3‚Äù. Vamos a sincronizar nuestra rama master para que, si en el futuro volvemos a crear una rama a partir de master, tengamos los √∫ltimos cambios.</p>

<p>Stash - En caso de tener cambios pendientes, los apilaremos para poder cambiar de rama. En el siguiente ejemplo, tenemos modificado el fichero ‚Äútest2‚Äù y apilaremos sus cambios. Tras apilar los cambios, podemos entrar de nuevo al fichero y veremos que ya no contiene los cambios.</p>
<pre><code class="language-git">$ git stash
    Saved working directory and index state WIP on dev: 293160a Create test2
</code></pre>
<p>Fetch - Sincroniza los cambios que ha sufrido la rama. No realiza ninguna modificaci√≥n en los ficheros de la rama actual, simplemente deja en ‚Äústandby‚Äù los cambios a la espera de realizar el pull. Podemos ahorrar este comando directamente usando el pull.</p>
<pre><code class="language-git">$ git fetch
    remote: Enumerating objects: 4, done.
    remote: Counting objects: 100% (4/4), done.
    remote: Compressing objects: 100% (2/2), done.
    remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
    Unpacking objects: 100% (3/3), done.
    From https://github.com/dielop101/mydummyrepo
       293160a..37662be  master     -&gt; origin/master
</code></pre>
<p>Pull - Actualiza la rama local con los cambios que existan en la rama del repositorio remoto. Cambiaremos de rama a master y bajaremos los cambios existentes.</p>
<pre><code class="language-git">$ git pull
    Updating 293160a..37662be
    Fast-forward
     test3 | 1 +
     1 file changed, 1 insertion(+)
     create mode 100644 test3
</code></pre>
<p>Stash pop - Desapilamos el contenido anteriormente apilado.</p>
<pre><code class="language-git">$ git stash pop
    On branch dev
    Changes not staged for commit:
      (use "git add &lt;file&gt;..." to update what will be committed)
      (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

            modified:   test2

    no changes added to commit (use "git add" and/or "git commit -a")
    Dropped refs/stash@{0} (0414e783e55f3950aecca0d6f3d9ca8a53e2e567)
</code></pre>

<h2 id="subir-cambios">Subir cambios</h2>
<p>Vamos a subir los cambios que hemos realizado en el fichero ‚Äútest2‚Äù.</p>

<p>Add - Identificamos los ficheros que queremos de los cuales queremos hacer commit. Dado que queremos hacer commit de todo lo existente, lo indicaremos mediante el car√°cter punto</p>
<pre><code class="language-git">$ git add .
</code></pre>

<p>Commit - Preparamos el commit que se a√±adir√° a la rama. Definimos un mensaje explicando el cambio realizado.</p>
<pre><code class="language-git">$ git commit -m "subiendo modificaci√≥n fichero test2"
    [dev c6ce524] subiendo modificaci√≥n fichero test2
     1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>Push - Sincronizamos los cambios en el respositorio remoto. Esto implica llevar todos los commits que tengamos pendientes en la rama al repositorio remoto. Dado que no existe la rama en el servidor, tendremos que indicarlo en el comando.</p>
<pre><code class="language-git">$ git push origin dev
    Enumerating objects: 5, done.
    Counting objects: 100% (5/5), done.
    Delta compression using up to 8 threads
    Compressing objects: 100% (2/2), done.
    Writing objects: 100% (3/3), 299 bytes | 299.00 KiB/s, done.
    Total 3 (delta 0), reused 0 (delta 0)
    remote:
    remote: Create a pull request for 'dev' on GitHub by visiting:
    remote:      https://github.com/dielop101/mydummyrepo/pull/new/dev
    remote:
    To https://github.com/dielop101/mydummyrepo.git
     * [new branch]      dev -&gt; dev
</code></pre>

<h2 id="finalizando-desarrollo">Finalizando desarrollo</h2>
<p>Una vez finalizado el desarrollo, procedemos a mergear los cambios de dev en la rama master.</p>

<p>Merge - Combina los cambios de una rama origen a una rama destino. En este caso, mergearemos dev en master.</p>

<h2 id="conclusiones">Conclusiones</h2>
<p>Git tiene infinidad de comandos y de par√°metros opcionales asociados a los comandos. Con este post, trato de documentar los conceptos y los comandos que considero m√°s importantes, dado que son los que m√°s uso en mi d√≠a a d√≠a. Por supuesto, estoy abierto al di√°logo en mis redes sociales :)</p>
:ET